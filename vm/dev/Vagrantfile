# -*- mode: ruby -*-
# vi: set ft=ruby :

$vm_memory     ||= "4096"
$vm_cpus       ||= "4"

$local_projects_directory     = "~/dev/satoyma"

$jvm_linking_script = <<SCRIPT
echo I am provisioning...
cd /usr/lib/jvm
sudo rm -rf default
sudo ln -s java-openjdk default
SCRIPT


# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "fedora19_x64"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "https://dl.dropboxusercontent.com/u/86066173/fedora-19.box"

  config.vm.hostname = "satoyma"


  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network :forwarded_port, guest: 8082, host: 8082

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  config.ssh.forward_agent = true
  config.ssh.forward_x11   = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # config.vm.synced_folder $local_projects_directory, "/home/vagrant/dev/vMain/", nfs: true
  # config.vm.synced_folder $local_3rdParty_directory, "/home/vagrant/dev/3rdParty/", nfs: true

  if $local_projects_directory
    puts "local projects directory is: " + $local_projects_directory
    config.vm.synced_folder $local_projects_directory, "/home/vagrant/dev/vMain/"
  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
    #   Do/Don't boot in headless mode
    vb.gui = false

    vb.customize ["modifyvm", :id, "--memory", $vm_memory]
    vb.customize ["modifyvm", :id, "--cpus", $vm_cpus]
  end

  #
  # View the documentation for the provider you're using for more
  # information on available options.

  config.vm.provision :puppet do |puppet|
    puppet.manifests_path = 'puppet/manifests'
    puppet.manifest_file  = "satoyma.pp"
    puppet.module_path    = 'puppet/modules'
    # puppet.options        = "--verbose --debug"
  end

  # config.vm.provision :shell, :inline => "sudo yum install -y java-1.7.0-openjdk-devel"
  config.vm.provision "shell", inline: $jvm_linking_script

  # config.vm.provision :shell, :inline => "sudo yum install -y git"
#  config.vm.provision :shell, :inline => "echo -e '#{File.read("#{Dir.home}/.gitconfig")}' > '/home/vagrant/.gitconfig'"

  config.vm.provision :shell, :inline => "sudo systemctl stop firewalld.service"
end
