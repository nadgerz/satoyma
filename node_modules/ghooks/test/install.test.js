require('./setup')();

describe('install', function () {
  var install = require('../lib/install');
  var hookContent = require('../lib/hook.template').content;

  it('warns when the target is not a git project', function () {
    fsStub({});
    console.warn = function (message) {
      expect(message).to.match(/this does not seem to be a git project/i);
    };
    install();
  });

  it('creates hooks directory', function () {
    fsStub({ '.git': {} });
    install();
    expect(fs.existsSync('.git/hooks')).to.be.true;
  });

  it('creates hook files', function () {
    fsStub({ '.git/hooks': {} });
    install();

    var hooks = fs.readdirSync('.git/hooks');

    expect(hooks).to.include('post-update');
    expect(fileContent('.git/hooks/post-update')).to.equal(hookContent);
    expect(fileMode('.git/hooks/post-update')).to.equal('755');

    expect(hooks).to.include('pre-applypatch');
    expect(fileContent('.git/hooks/pre-applypatch')).to.equal(hookContent);
    expect(fileMode('.git/hooks/pre-applypatch')).to.equal('755');

    expect(hooks).to.include('pre-commit');
    expect(fileContent('.git/hooks/pre-commit')).to.equal(hookContent);
    expect(fileMode('.git/hooks/pre-commit')).to.equal('755');

    expect(hooks).to.include('pre-push');
    expect(fileContent('.git/hooks/pre-push')).to.equal(hookContent);
    expect(fileMode('.git/hooks/pre-push')).to.equal('755');

    expect(hooks).to.include('pre-rebase');
    expect(fileContent('.git/hooks/pre-rebase')).to.equal(hookContent);
    expect(fileMode('.git/hooks/pre-rebase')).to.equal('755');

    expect(hooks).to.include('update');
    expect(fileContent('.git/hooks/update')).to.equal(hookContent);
    expect(fileMode('.git/hooks/update')).to.equal('755');
  });

  describe('backing up existing hooks', function () {

    var existingGHook = '// Generated by ghooks. Do not edit this file.';
    var existingUserHook = '# existing content';

    beforeEach(function () {
      fsStub({ '.git/hooks': {
        'pre-commit': existingGHook,
        'pre-push': existingUserHook
      }});

      install();
      this.files = fs.readdirSync('.git/hooks');
    });

    it('does not keep a copy of an existing GHook', function () {
      expect(this.files).to.not.include('pre-commit.bkp');
      expect(this.files).to.include('pre-commit');
    });

    it('backs up an existing user hook', function () {
      expect(this.files).to.include('pre-push');
      expect(this.files).to.include('pre-push.bkp');
      expect(fileContent('.git/hooks/pre-push.bkp')).to.equal(existingUserHook);
    });

  });

});
